syntax = "proto3";

package managedenvironment.v1;

import "buf/validate/validate.proto";
import "meta/v1/meta.proto";
import "status/v1/status.proto";

option go_package = "github.com/Mattilsynet/mapis/gen/managedenvironment/v1;managedenvironment";

message ManagedEnvironment {
  meta.v1.TypeMeta type = 1;
  // metadata.name is the name of the environment, e.g., map-dev. This might
  // also be used for zone name in the provided environment which could be gcp,
  // old: 'dnz_zone_name'
  meta.v1.ObjectMeta metadata = 10;
  ManagedEnvironmentSpec spec = 20;
  ManagedEnvironmentStatus status = 30;
}

message ManagedEnvironmentSpec {
  // e.g., gcp.plattform@mattilsynet.no
  string azure_owner_group = 1;
  // slack channel for plattform oriented notifications, typically idporten,
  // azure etc
  string slack_channel_plattform_notification_email = 10;
  // slack channel for your budget limits
  string slack_channel_budget_email = 20;
  // slack channel for your own notifications, typically your own stacktraces
  // via input.slack
  string slack_channel_alert_notification_email = 30;
  // what you'd to be the top domain of your team short name to be, e.g., map
  // for all of plattform's managed-environments: map-dev, map-ops-dev,
  // map-secret. Typically used for one centralized OCI image repo:
  // .../map/<some-service>/image-id@v1
  // also used to deduct parent folder id in gcp 
  // map.map-ops
  // map.map-ops-dev
  // foniks.map-ops
  string namespace = 40;
}
message ManagedEnvironmentStatus {
  // filled in later by the difference environment providers, i.e., gcp, aws,
  // on-premise e.g., gcp-project: {all the info about project id, folder id
  // etc}
  map<string, string> statusMap = 1;
}
