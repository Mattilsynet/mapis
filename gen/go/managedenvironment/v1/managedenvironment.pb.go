// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: managedenvironment/v1/managedenvironment.proto

package managedenvironment

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/Mattilsynet/mapis/gen/go/meta/v1"
	_ "github.com/Mattilsynet/mapis/gen/go/status/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ManagedEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *v1.TypeMeta `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// metadata.name is the name of the environment, e.g., map-dev. This might
	// also be used for zone name in the provided environment which could be gcp,
	// old: 'dnz_zone_name'
	Metadata *v1.ObjectMeta            `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *ManagedEnvironmentSpec   `protobuf:"bytes,20,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *ManagedEnvironmentStatus `protobuf:"bytes,30,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ManagedEnvironment) Reset() {
	*x = ManagedEnvironment{}
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedEnvironment) ProtoMessage() {}

func (x *ManagedEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedEnvironment.ProtoReflect.Descriptor instead.
func (*ManagedEnvironment) Descriptor() ([]byte, []int) {
	return file_managedenvironment_v1_managedenvironment_proto_rawDescGZIP(), []int{0}
}

func (x *ManagedEnvironment) GetType() *v1.TypeMeta {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ManagedEnvironment) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ManagedEnvironment) GetSpec() *ManagedEnvironmentSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ManagedEnvironment) GetStatus() *ManagedEnvironmentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ManagedEnvironmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g., gcp.plattform@mattilsynet.no
	AzureOwnerGroup string `protobuf:"bytes,1,opt,name=azure_owner_group,json=azureOwnerGroup,proto3" json:"azure_owner_group,omitempty"`
	// slack channel for plattform oriented notifications, typically idporten,
	// azure etc
	SlackChannelPlattformNotificationEmail string `protobuf:"bytes,10,opt,name=slack_channel_plattform_notification_email,json=slackChannelPlattformNotificationEmail,proto3" json:"slack_channel_plattform_notification_email,omitempty"`
	// slack channel for your budget limits
	SlackChannelBudgetEmail string `protobuf:"bytes,20,opt,name=slack_channel_budget_email,json=slackChannelBudgetEmail,proto3" json:"slack_channel_budget_email,omitempty"`
	// slack channel for your own notifications, typically your own stacktraces
	// via input.slack
	SlackChannelAlertNotificationEmail string `protobuf:"bytes,30,opt,name=slack_channel_alert_notification_email,json=slackChannelAlertNotificationEmail,proto3" json:"slack_channel_alert_notification_email,omitempty"`
	// what you'd to be the top domain of your team short name to be, e.g., map
	// for all of plattform's managed-environments: map-dev, map-ops-dev,
	// map-secret. Typically used for one centralized OCI image repo:
	// .../map/<some-service>/image-id@v1
	// also used to deduct parent folder id in gcp
	// map.map-ops
	// map.map-ops-dev
	// foniks.map-ops
	Namespace string `protobuf:"bytes,40,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ManagedEnvironmentSpec) Reset() {
	*x = ManagedEnvironmentSpec{}
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedEnvironmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedEnvironmentSpec) ProtoMessage() {}

func (x *ManagedEnvironmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedEnvironmentSpec.ProtoReflect.Descriptor instead.
func (*ManagedEnvironmentSpec) Descriptor() ([]byte, []int) {
	return file_managedenvironment_v1_managedenvironment_proto_rawDescGZIP(), []int{1}
}

func (x *ManagedEnvironmentSpec) GetAzureOwnerGroup() string {
	if x != nil {
		return x.AzureOwnerGroup
	}
	return ""
}

func (x *ManagedEnvironmentSpec) GetSlackChannelPlattformNotificationEmail() string {
	if x != nil {
		return x.SlackChannelPlattformNotificationEmail
	}
	return ""
}

func (x *ManagedEnvironmentSpec) GetSlackChannelBudgetEmail() string {
	if x != nil {
		return x.SlackChannelBudgetEmail
	}
	return ""
}

func (x *ManagedEnvironmentSpec) GetSlackChannelAlertNotificationEmail() string {
	if x != nil {
		return x.SlackChannelAlertNotificationEmail
	}
	return ""
}

func (x *ManagedEnvironmentSpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ManagedEnvironmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filled in later by the difference environment providers, i.e., gcp, aws,
	// on-premise e.g., gcp-project: {all the info about project id, folder id
	// etc}
	StatusMap map[string]string `protobuf:"bytes,1,rep,name=statusMap,proto3" json:"statusMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManagedEnvironmentStatus) Reset() {
	*x = ManagedEnvironmentStatus{}
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedEnvironmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedEnvironmentStatus) ProtoMessage() {}

func (x *ManagedEnvironmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_managedenvironment_v1_managedenvironment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedEnvironmentStatus.ProtoReflect.Descriptor instead.
func (*ManagedEnvironmentStatus) Descriptor() ([]byte, []int) {
	return file_managedenvironment_v1_managedenvironment_proto_rawDescGZIP(), []int{2}
}

func (x *ManagedEnvironmentStatus) GetStatusMap() map[string]string {
	if x != nil {
		return x.StatusMap
	}
	return nil
}

var File_managedenvironment_v1_managedenvironment_proto protoreflect.FileDescriptor

var file_managedenvironment_v1_managedenvironment_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf8, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x16,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x5a, 0x0a, 0x2a, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3b,
	0x0a, 0x1a, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x26, 0x73,
	0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x74, 0x74, 0x69, 0x6c, 0x73, 0x79, 0x6e, 0x65, 0x74,
	0x2f, 0x6d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managedenvironment_v1_managedenvironment_proto_rawDescOnce sync.Once
	file_managedenvironment_v1_managedenvironment_proto_rawDescData = file_managedenvironment_v1_managedenvironment_proto_rawDesc
)

func file_managedenvironment_v1_managedenvironment_proto_rawDescGZIP() []byte {
	file_managedenvironment_v1_managedenvironment_proto_rawDescOnce.Do(func() {
		file_managedenvironment_v1_managedenvironment_proto_rawDescData = protoimpl.X.CompressGZIP(file_managedenvironment_v1_managedenvironment_proto_rawDescData)
	})
	return file_managedenvironment_v1_managedenvironment_proto_rawDescData
}

var file_managedenvironment_v1_managedenvironment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_managedenvironment_v1_managedenvironment_proto_goTypes = []any{
	(*ManagedEnvironment)(nil),       // 0: managedenvironment.v1.ManagedEnvironment
	(*ManagedEnvironmentSpec)(nil),   // 1: managedenvironment.v1.ManagedEnvironmentSpec
	(*ManagedEnvironmentStatus)(nil), // 2: managedenvironment.v1.ManagedEnvironmentStatus
	nil,                              // 3: managedenvironment.v1.ManagedEnvironmentStatus.StatusMapEntry
	(*v1.TypeMeta)(nil),              // 4: meta.v1.TypeMeta
	(*v1.ObjectMeta)(nil),            // 5: meta.v1.ObjectMeta
}
var file_managedenvironment_v1_managedenvironment_proto_depIdxs = []int32{
	4, // 0: managedenvironment.v1.ManagedEnvironment.type:type_name -> meta.v1.TypeMeta
	5, // 1: managedenvironment.v1.ManagedEnvironment.metadata:type_name -> meta.v1.ObjectMeta
	1, // 2: managedenvironment.v1.ManagedEnvironment.spec:type_name -> managedenvironment.v1.ManagedEnvironmentSpec
	2, // 3: managedenvironment.v1.ManagedEnvironment.status:type_name -> managedenvironment.v1.ManagedEnvironmentStatus
	3, // 4: managedenvironment.v1.ManagedEnvironmentStatus.statusMap:type_name -> managedenvironment.v1.ManagedEnvironmentStatus.StatusMapEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_managedenvironment_v1_managedenvironment_proto_init() }
func file_managedenvironment_v1_managedenvironment_proto_init() {
	if File_managedenvironment_v1_managedenvironment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managedenvironment_v1_managedenvironment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_managedenvironment_v1_managedenvironment_proto_goTypes,
		DependencyIndexes: file_managedenvironment_v1_managedenvironment_proto_depIdxs,
		MessageInfos:      file_managedenvironment_v1_managedenvironment_proto_msgTypes,
	}.Build()
	File_managedenvironment_v1_managedenvironment_proto = out.File
	file_managedenvironment_v1_managedenvironment_proto_rawDesc = nil
	file_managedenvironment_v1_managedenvironment_proto_goTypes = nil
	file_managedenvironment_v1_managedenvironment_proto_depIdxs = nil
}
